# Generated by CodiumAI
from ..models.tournament import Tournament
from ..models.user import User
from fastapi import HTTPException
from sqlalchemy.orm import Session
from sqlalchemy.exc import SQLAlchemyError
from ..schemas.tournament import TournamentCreate, TournamentRead
from backend.app.api.tournament import create_tournament

# Dependencies:
# pip install pytest-mock
import pytest

#
# class TestCreateTournament:
#
#     # Successfully create a tournament with valid data and admin user
#     @pytest.mark.asyncio
#     async def test_create_tournament_success(self, mocker):
#         from fastapi import HTTPException
#         from sqlalchemy.orm import Session
#         from ..models.tournament import Tournament
#         from ..schemas.tournament import TournamentCreate, TournamentRead
#         from ..api.tournament import create_tournament
#
#         mock_db = mocker.Mock(spec=Session)
#         mock_user = mocker.Mock()
#         mock_user.is_admin = True
#
#         tournament_data = TournamentCreate(name="Test Tournament", logo="test_logo.png")
#         mock_db.query.return_value.filter.return_value.first.return_value = None
#
#         mock_db.add.return_value = None
#         mock_db.commit.return_value = None
#         mock_db.refresh.return_value = None
#
#         result = await create_tournament(tournament_data, db=mock_db, current_user=mock_user)
#
#         assert result.name == "Test Tournament"
#         assert result.logo == "test_logo.png"
#         assert result.finished is False
#
#     # Attempt to create a tournament with a name that already exists
#     @pytest.mark.asyncio
#     async def test_create_tournament_name_exists(self, mocker):
#         from fastapi import HTTPException
#         from sqlalchemy.orm import Session
#         from ..models.tournament import Tournament
#         from ..schemas.tournament import TournamentCreate
#         from ..api.tournament import create_tournament
#
#         mock_db = mocker.Mock(spec=Session)
#         mock_user = mocker.Mock()
#         mock_user.is_admin = True
#
#         tournament_data = TournamentCreate(name="Existing Tournament", logo="existing_logo.png")
#         existing_tournament = Tournament(name="Existing Tournament", logo="existing_logo.png")
#         mock_db.query.return_value.filter.return_value.first.return_value = existing_tournament
#
#         with pytest.raises(HTTPException) as exc_info:
#             await create_tournament(tournament_data, db=mock_db, current_user=mock_user)
#
#         assert exc_info.value.status_code == 400
#         assert exc_info.value.detail == "Tournament with this name already exists"


@pytest.mark.asyncio
async def test_create_tournament_success(tournament_mocker):
    # Arrange
    mock_db = tournament_mocker["db"]
    mock_user = tournament_mocker["user"]
    tournament_data = TournamentCreate(name="Test Tournament", logo="test_logo.png")

    # Act
    result = await create_tournament(tournament_data, db=mock_db, current_user=mock_user)

    # Assert
    assert result.name == "Test Tournament"
    assert result.logo == "test_logo.png"
    assert result.finished is False
    mock_db.add.assert_called_once()
    mock_db.commit.assert_called_once()
    mock_db.refresh.assert_called_once()


@pytest.mark.asyncio
async def test_create_tournament_name_exists(tournament_mocker):
    # Arrange
    mock_db = tournament_mocker["db"]
    mock_user = tournament_mocker["user"]
    tournament_data = TournamentCreate(name="Existing Tournament", logo="existing_logo.png")
    tournament_mocker["set_existing_tournament"]()

    # Act & Assert
    with pytest.raises(HTTPException) as exc_info:
        await create_tournament(tournament_data, db=mock_db, current_user=mock_user)

    assert exc_info.value.status_code == 400
    assert exc_info.value.detail == "Tournament with this name already exists"


@pytest.mark.asyncio
async def test_create_tournament_db_error(tournament_mocker):
    # Arrange
    mock_db = tournament_mocker["db"]
    mock_user = tournament_mocker["user"]
    tournament_data = TournamentCreate(name="Test Tournament", logo="test_logo.png")
    tournament_mocker["simulate_db_error"]()

    # Act & Assert
    with pytest.raises(HTTPException) as exc_info:
        await create_tournament(tournament_data, db=mock_db, current_user=mock_user)

    assert exc_info.value.status_code == 500
    assert exc_info.value.detail == "An error occurred while creating the tournament"
